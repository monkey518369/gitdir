1.运行时数据区
	1.方法区(Method Area)(线程共享区域)
		用于存储被虚拟机加载的类信息,常量,静态变量,即使编译器编译后的代码等数据
		当方法区无法满足内存分配时将抛出,outofmemoryerror异常
		包括   运行时常连池  (constant pool table)   用于存放编译期生成的各种字面量和符号引用(编译时不能确定具体内容,等到运行时才能确定).
	
	2.虚拟机栈(VM[java virtual machine] Stack)(线程私有)(局部变量表部分)
		描素的是java方法执行的内存模型:每个方法执行的时候都会创建一个栈帧,用于存储局部变量,操作栈,动态链接,方法出口等信息.
		每一个方法被调用直至完成的过程,就对应这一个栈帧进栈到出栈的过程.
		局部变量表存放了编译期可知的基本类型,对象引用,returnAddress类型(指向了一条字节码指令的地址)
		有两个异常1.如果线程请求的栈深度大于虚拟机所允许的深度将跑出StackOverflowError
				  2.如果虚拟机栈可以扩展,当扩展时无法申请到足够的内存时,就会抛出OutOfMemoryError异常
	
	3.本地方法栈(Native Method Stack)
	
	4.堆(Heap)(线程共享)
		虚拟机开始时创建heap,用于存放对象实例和数组.是垃圾收集器管理的主要区域.
		可以处在物理上不连续的空间内,但是逻辑上必须是连续的.
		若heap中没有内存完成实例分配,并且heap也无法在扩展的时候将会抛出,outofmemoryerror异常.
	
	5.程序计数器(Program Counter Register)(线程私有)
		作用:当前线程所执行的字节码的行号指示器.
			 由于java多线程是通过线程轮流切换并分配处理器执行时间的方式实现的,所有在一个确定的时间,一个处理器只能执行一个线程的指令,
			 因此为了线程切换后能恢复到正确的执行位置每条线程都需要个一个独立的Program counter register.
			 各线程之间的计数器相互独立互不影响,独立存储,这类内存存储区域为线程私有的内存.
			 若虚拟机正在执行的是一个java method,那么这个计数器记录的是正在执行的字节码指令的地址.
			 若是一个native方法,计数器为undefiend.
			 这个内存区域是jvm唯一没有规定outofmemoryerror的区域.

			 
2.对象访问
	Object obj = new Object();
	其中Object obj 这句会反应在栈内存中的本地变量表中,作为一个reference类型数据出现,生成一个对象的引用
	new Object() 这句会反应在堆内存中,在堆中形成一块存储了Obejct所有实例的结构化内存.其中还必须保存能够访问到其对象类型数据信息的地址.
	由于jvm没有规定reference类型的访问方式以及如何访问到堆中的具体位置,只规定是一个引用.所以不同的虚拟机有不同的实现.
		1.句柄实现.
			在堆内存中要开辟出一块内存来,用作句柄池.reference中存储的是指向句柄池的地址.句柄池中包含了指向对象实例数据的地址和指向类型数据的地址
		2.直接指针
			reference中存储的是对象数据的地址.在对象数据中又有指向类型数据的地址.
		总结:句柄实现可以在对象移动时具有跟高的效率,但是需要多一次指针地位.

		
3.outofmemory
	1.java堆溢出
		1.memory leak(内存泄露)
		2.memory overflow(内存溢出)
	2.虚拟机栈和本机方法栈溢出
		1.单线程下一般都是stackoverflow.
		2.多线程下可能出现outofmemory.不减少线程和更换跟大内存的情况下只有减小最大堆和最大栈容量来换取更多线程.
	3.运行时常量池内存溢出.(属于方法区的一部分)
	4.方法区.
		outofmemery:PermGen space(说明是方法区内存溢出).
		