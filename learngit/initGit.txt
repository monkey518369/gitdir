1.创建版本库及第一次提交
	git --version   //查看git版本信息
	git config --global user.name  'username'  //为git设置全局的用户名
	git config --global user.email xxxxx@.xx.com  //为git设置全局的邮箱
	git config --system alias.st status    //吧git的status命令用匿名st代替,简介的输入对全体用户有效
	git config --global alias.st status   //这个设置只对当前用户有效
	git config --global color.ui true   //GiT命令中输出开始颜色显示
	
2.工作区下的.git文件
	git grep "context"  //在工作区目录下查找包含context内容的文件
	git rev-parse --git-dir		//.git文件所在的目录
	git rev-parse --show-toplevel  //显示工作区根目录
	git rev-parse --show-prefix    //相对于工作区根目录的相对目录
	git rev-parse --show-cdup  		//从当前工作区退到跟的深度

3.暂存区(stage)
	git status -s		//加上-s表示简介显示
	MM  welcome.txt 	//第一个M表示stage与版本库中的代码有差异第二个M表示工作区的代码和stage中的代码有差异
	git diff		//表示工作区和stage区的改动
	git diff HEAD	//将工作区和当前分支做比较查看改动
	git diff --staged	//暂存区和代码库中的代码的改动
	
	git reset HEAD		//暂存区的内容会被master分支的内容所覆盖,工作区不受影响
	git   --cached <filename>		//直接从暂存区删除文件,工作区不受影响
	git checkout . |git checkout --<filename> 		//用暂存区的文件替换工作区的文件  .表示全部替换
	git checkout HEAD . | git checkout HEAD <filename>		//用mater分支替换工作区和暂存区的内容,

4.展示暂存区和版本库的目录树
	git ls-tree <-l> HEAD		//展示版本库中的目录树 -l为显示文件的大小,可有可无

5.git对象库
	git log [-n] --pretty=raw  //会显示git的本次提交,本次提交对应的目录树,本次提交对应发父提交   -n为显示最近的几次提交
	git log [-n] --pretty=oneline	//简单的显示本次提交,只有一行显示(id + -m)
	git log [-n] --graph	//显示何时出现了分支和合并等信息
	git cat-file [-t|-p]  object  //-t查看对象的类型(tree,commit,parent,blob等)-p查看对象的内容
	git rev-parse object  //用来显示object的id
	
6.git方便的访问对象的方法.
	1.不必把id写全,只要是不冲突的前几位就可以了,最少四位
	2.master代表master的最新提交
	3.HEAD代表版本库中的最新的一次提交
	4.符号^可以指代父提交 多个可以表示爷爷提交老爷爷提交...
	5.对于一个提交有多个福提交可以用HEAD^n获取第n个父提交
	6.~n也可以指代父提交,~3表示^^^
	7.提交所对应的树对象可以用  id^{tree} 表示
	8.提交对应的文件对象可以用id:path/to/file表示
	9.暂存区的文件对象可以用  :path/to/file  访问
7.版本回退
	1.git reset --hard id 	//退回到id的时候版本库和工作区,暂存区都是这样
	2.git reset --soft id 	//退回到id的时候的版本库,暂存区和工作区不改变
	3.git reset --mixed id 	|git reset id	//改变引用指向(版本库)和暂存区但工作区不改变
	4.git reset --filename  //相对于git add filename的反向操作.吧一个文件去除暂存区
		git reset HEAD filename 	//同上面的命令
	2.git reflog [show  branchname] [| head -n]   //显示操作记录,这可可以后悔你的reset,然后重新回到另一个reset版本
	   //可以使用简单的<refnaem>@{<n>}进行reset.   e.g. git reset --hard master@{2}
	   
8.检出
	1.git checkout [-Q] [<commit>] [--] <paths> ...
		为了防止路径和id冲突,可以用[--]来加以区别,paths前加上
		commit是可选命令,若是省略则默认是从暂存区检出覆盖工作区.(reset默认是从head检出覆盖暂存区)所以通常用reset重置暂存区,二用checkout重置工作区
		带上path不会改变head指针,主要用于用暂存区覆盖工作区的内容
	2.git checkout [branch]|[id]
		会切换到另一个分支或则进入分离头指针状态,而在头指针分离状态下是不能对文件进行跟中的,容易丢失
	3.git checkout [-m] [-b [--orphan]] <new_branch> [start_point]
		主要用于创建和切换新的分支,新的分支从指定的[start_point]开始创建
	4.小命令
		1.git checkout branch	//检出branch分支跟新head指向branch,及用branch指向的树更新工作区和暂存区.
		2.git checkout 	//汇总工作区,暂存区和head之间的差异
		3.git checkout HEAD 	//同上
		4.git checkout --filename 	//用暂存区的file覆盖工作区的file
		5.git checkout branch --filename 	//维持head不变,用branch所指向的file替换工作区和暂存区的file,直接覆盖
		6.git checkout . |gitcheckout -- .	//直接使用暂存区的内容覆盖本地内容,不给确认的机会哦
9.git stash
	1.git stash		//保存当前的工作进度,会分别对暂存区和工作区额内容进行保存
	2.git stash list		//显示进度列表
	3.git stash pop [--index] [<stash>]		//如果不使用任何参数,会恢复最新保存的工作进度,并将恢复的工作进度从工作进度表中删除.
		<stash> 从list中获取的值,若加上这个参数,则会恢复这个进度,并且从进度表中删除这个进度.
		--index 参数除了恢复工作区的文件外还尝试恢复暂存区的文件,
	4.git stash [save [--patch]  [k|--[no-]keep-index] [-q|--quiet] [message]]
		使用--patch会显示工作区和head的差异.
		使用-k|--keep-index保存后不会讲暂存区重置,默认会将暂存区和工作区将至重置.
	5.git stash apply [--index] [<stash>]
		和git stash pop 一样,只是不删除恢复的进度.
	6.git stash drop [<stash>]		//删除一个存储的进度,默认删除最近的进度
	7.git stash clear		//删除所有的进度
	8.git stash branch <branchname> <stash>		//基于进度创建分支
	
10.版本clone

11.git merge
	